AWSTemplateFormatVersion: '2010-09-09'
Description: 'CodeBuild project to copy AWS Samples Bedrock Access Gateway image to private ECR repository'

Parameters:
  ProjectName:
    Type: String
    Default: bedrock-gateway
    Description: Project name used for resource naming
    
  TargetECRRepositoryName:
    Type: String
    Default: bedrock-gateway
    Description: Name of the target ECR repository in your account
    
  SourceImageTag:
    Type: String
    Default: latest
    Description: Tag of the source image to copy
    
  TargetImageTag:
    Type: String
    Default: latest
    Description: Tag for the copied image in your repository
    
  BuildComputeType:
    Type: String
    Default: BUILD_GENERAL1_MEDIUM
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
      - BUILD_GENERAL1_2XLARGE
    Description: CodeBuild compute type

Resources:
  # ================================
  # ECR Repository (if it doesn't exist)
  # ================================
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref TargetECRRepositoryName
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: '{"rules":[{"rulePriority":1,"description":"Keep last 10 images","selection":{"tagStatus":"tagged","tagPrefixList":["latest","v"],"countType":"imageCountMoreThan","countNumber":10},"action":{"type":"expire"}},{"rulePriority":2,"description":"Delete untagged images older than 1 day","selection":{"tagStatus":"untagged","countType":"sinceImagePushed","countUnit":"days","countNumber":1},"action":{"type":"expire"}}]}'
  
  # ================================
  # CodeBuild IAM Role
  # ================================
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-codebuild-service-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # CloudWatch Logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-*"
              
              # ECR Permissions for target repository
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                Resource: "*"
              
              - Effect: Allow
                Action:
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: !GetAtt ECRRepository.Arn
              
              # ECR Permissions for AWS Samples repository (cross-account)
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: !Sub "arn:aws:ecr:${AWS::Region}:366590864501:repository/bedrock-proxy-api-ecs"

  # ================================
  # CloudWatch Log Group
  # ================================
  CodeBuildLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/codebuild/${ProjectName}-image-copy"
      RetentionInDays: 30

  # ================================
  # CodeBuild Project
  # ================================
  ImageCopyProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ProjectName}-image-copy"
      Description: Copy AWS Samples Bedrock Gateway image to private ECR
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: !Ref BuildComputeType
        Image: aws/codebuild/standard:7.0
        PrivilegedMode: true # Required for Docker operations
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: SOURCE_IMAGE_URI
            Value: !Sub "366590864501.dkr.ecr.${AWS::Region}.amazonaws.com/bedrock-proxy-api-ecs:${SourceImageTag}"
          - Name: TARGET_REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${TargetECRRepositoryName}"
          - Name: TARGET_IMAGE_TAG
            Value: !Ref TargetImageTag
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - echo Logging in to AWS Samples ECR repository...
                - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin 366590864501.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
                - echo Source image URI - $SOURCE_IMAGE_URI
                - echo Target repository URI - $TARGET_REPOSITORY_URI
            build:
              commands:
                - echo Build started on `date`
                - echo Pulling source image...
                - docker pull $SOURCE_IMAGE_URI
                - echo Tagging image for target repository...
                - docker tag $SOURCE_IMAGE_URI $TARGET_REPOSITORY_URI:$TARGET_IMAGE_TAG
                - echo Tagged as $TARGET_REPOSITORY_URI:$TARGET_IMAGE_TAG
            post_build:
              commands:
                - echo Build completed on `date`
                - echo Pushing the Docker image to target ECR repository...
                - docker push $TARGET_REPOSITORY_URI:$TARGET_IMAGE_TAG
                - echo Image pushed successfully
                - echo Image URI - $TARGET_REPOSITORY_URI:$TARGET_IMAGE_TAG
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
          GroupName: !Ref CodeBuildLogGroup

  # ================================
  # Lambda Function for Triggering Build
  # ================================
  BuildTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-build-trigger-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CodeBuildStartPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt ImageCopyProject.Arn

  BuildTriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-build-trigger"
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt BuildTriggerRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json
          import cfnresponse
          
          def lambda_handler(event, context):
              print(f"Event: {json.dumps(event)}")
              
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  return
              
              try:
                  codebuild = boto3.client('codebuild')
                  project_name = event['ResourceProperties']['ProjectName']
                  
                  print(f"Starting CodeBuild project: {project_name}")
                  
                  response = codebuild.start_build(projectName=project_name)
                  build_id = response['build']['id']
                  
                  print(f"Build started with ID: {build_id}")
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'BuildId': build_id,
                      'Message': f'Build started successfully with ID: {build_id}'
                  })
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })

  # ================================
  # Custom Resource to Trigger Build
  # ================================
  TriggerImageCopy:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt BuildTriggerFunction.Arn
      ProjectName: !Ref ImageCopyProject
    DependsOn:
      - ImageCopyProject
      - ECRRepository

# ================================
# Outputs
# ================================
Outputs:
  ECRRepositoryURI:
    Description: URI of the target ECR repository
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${TargetECRRepositoryName}"
    Export:
      Name: !Sub "${ProjectName}-ecr-repo-uri"
      
  ECRRepositoryName:
    Description: Name of the target ECR repository
    Value: !Ref TargetECRRepositoryName
    Export:
      Name: !Sub "${ProjectName}-ecr-repo-name"
      
  FullImageURI:
    Description: Full URI of the copied image
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${TargetECRRepositoryName}:${TargetImageTag}"
    Export:
      Name: !Sub "${ProjectName}-full-image-uri"
      
  CodeBuildProjectName:
    Description: Name of the CodeBuild project for future builds
    Value: !Ref ImageCopyProject
    Export:
      Name: !Sub "${ProjectName}-codebuild-project"
      
  CodeBuildProjectArn:
    Description: ARN of the CodeBuild project
    Value: !GetAtt ImageCopyProject.Arn
    Export:
      Name: !Sub "${ProjectName}-codebuild-project-arn"